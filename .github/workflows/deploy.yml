name: Deploy Drape App

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
          
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: drape-93229
          
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker
        
      - name: Create backend .env from secrets
        run: |
          cd backend
          cat > .env << EOF
          GOOGLE_CLOUD_PROJECT=drape-93229
          GITHUB_CLIENT_ID=${{ secrets.EXPO_PUBLIC_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}
          PORT=8080
          EOF
          
      - name: Deploy Backend to Cloud Run
        run: |
          cd backend
          gcloud builds submit --config cloudbuild.yaml
          
      - name: Get Backend URL
        id: get-url
        run: |
          BACKEND_URL=$(gcloud run services describe drape-backend --region=us-central1 --format="value(status.url)")
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend deployed at: $BACKEND_URL"
          
  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
        
      - name: Create frontend .env from secrets
        run: |
          cat > .env << EOF
          EXPO_PUBLIC_ENV=production
          EXPO_PUBLIC_FIREBASE_API_KEY=${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          EXPO_PUBLIC_FIREBASE_APP_ID=${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID }}
          EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          EXPO_PUBLIC_GCP_PROJECT_ID=drape-93229
          EXPO_PUBLIC_GCP_REGION=us-central1
          EXPO_PUBLIC_GITHUB_CLIENT_ID=${{ secrets.EXPO_PUBLIC_GITHUB_CLIENT_ID }}
          EXPO_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend_url }}
          EXPO_PUBLIC_WS_URL=${{ needs.deploy-backend.outputs.backend_url }}
          EOF
          
      - name: Build for production
        run: |
          npm run build
          
      - name: Deploy to Expo
        run: |
          npx eas build --platform all --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  notify-team:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "ðŸš€ Deployment completed!"
          echo "Backend: ${{ needs.deploy-backend.outputs.backend_url }}"
          echo "Status: ${{ job.status }}"
